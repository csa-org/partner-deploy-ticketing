---
ticketingapp:
  needs:
    - kubernetes
  steps:
    - name: instances
      extension: Terraform
      source:
        location: "git+https://github.com/lacework-demo/ticketing-app.git"
        subdir: "deploy/terraform/aws"
      args:
        cloud: AWS
        tfvars:
          datalayer_instances: 2
          vpc_id: !lookup /kubernetes/k8s/outputs/vpc_id
          subnet_id1: !lookup /kubernetes/k8s/outputs/public_subnet_id,0
          subnet_id2: !lookup /kubernetes/k8s/outputs/public_subnet_id,1
          region: !lookup /kubernetes/k8s/outputs/region
          cluster_worker_security_group: !lookup /kubernetes/k8s/outputs/cluster_worker_security_group_id
        outputs:
          - datalayer-url
          - datalayer-port
          - mongodb_ip
          - mongodb_private_ip
          - ips
          - private_ips
          - pem
          - utility_vpc_id
          - utility_vpc_subnet_id1
          - utility_vpc_subnet_id2
          - utility_ip
    - name: mongodb-setup
      extension: Ansible
      source:
        location: "git+https://github.com/lacework-demo/ticketing-app.git"
        subdir: "deploy/ansible"
      tags: application
      needs:
        - instances
      helpers:
        - helper: ServiceAvailable # Ensure deployed ec2 instance is running and available on port 22
          args:
            hostname: !lookup /instances/outputs/mongodb_ip
            port: 22
        - helper: WriteValue # Write out the pem file created for ec2 instance
          run_on_dryrun: true
          args:
            raw_value: !lookupSecret /instances/outputs/pem
            dstfile: instance.pem
            mode: 0600
        - helper: GenerateOutput
          run_on_dryrun: true
          args:
            dst: mongodb_conn_string
            format: "mongodb://{{ .inventory_private }}:27017/tickets"
      args:
        inventory: !lookup /instances/outputs/mongodb_ip
        inventory_private: !lookup /instances/outputs/mongodb_private_ip
        private_key: instance.pem
        galaxy:
          roles:
            - undergreen.mongodb
        user: "ubuntu"
        playbook: mongodb.yml
        privilege_escalation:
          become: true
        extra_vars:
          mongodb_db: tickets
          mongodb_user: tickets
          mongodb_pass: tickets
          lw_access_token: !secret lacework.access_token
    - name: datalayer-app
      extension: Ansible
      source:
        location: "git+https://github.com/lacework-demo/ticketing-app.git"
        subdir: "deploy/ansible"
      tags: application
      needs:
        - instances
        - mongodb-setup
      helpers:
        - helper: ServiceAvailable # Ensure deployed ec2 instance is running and available on port 22
          args:
            hostname: !lookup /instances/outputs/ips
            port: 22
        - helper: WriteValue # Write out the pem file created for ec2 instance
          run_on_dryrun: true
          args:
            raw_value: !lookupSecret /instances/outputs/pem
            dstfile: instance.pem
            mode: 0600
        - helper: GenerateOutput
          run_on_dryrun: true
          args:
            format: "http://{{ .datalayer_host0 }}:{{ .extra_vars.datalayer_port }},http://{{ .datalayer_host1 }}:{{ .extra_vars.datalayer_port }}"
            dst: datalayer_backend
      args:
        inventory: !lookup /instances/outputs/ips
        datalayer_host0: !lookup /instances/outputs/private_ips,0
        datalayer_host1: !lookup /instances/outputs/private_ips,1
        private_key: instance.pem
        galaxy:
          roles:
            - geerlingguy.nodejs
            - weareinteractive.pm2
        user: "ubuntu"
        playbook: nodeapp.yml
        privilege_escalation:
          become: true
        extra_vars:
          datalayer_port: 8889
          mongodb_conn_string: !lookup /mongodb-setup/outputs/mongodb_conn_string
          mongodb_user: tickets
          mongodb_pass: tickets
          lw_access_token: !secret lacework.access_token

    - name: frontend-k8s
      extension: Kubectl
      needs:
        - datalayer-app
      helpers:
        - helper: WriteValue
          run_on_dryrun: true
          args:
            name: kubectl_config
            dstfile: kubectl
        - helper: GenerateOutput
          run_on_dryrun: true
          lifecycle:
            - afterCreate
          args:
            dst: app_url
            format: "http://{{ index . \"ticketing-frontend\" }}"
      source:
        location: "https://raw.githubusercontent.com/lacework-demo/ticketing-app/main/deploy/k8s/frontend.yml"
        templates:
          - "frontend.yml"
      args:
        control_plane_url: !lookup /kubernetes/k8s/outputs/cluster_endpoint
        kubectl_config: !lookupSecret /kubernetes/k8s/outputs/kubectl_config
        kubectl_config_file: kubectl
        kube_manifest_path: frontend.yml
        replicas: 2
        datalayer_backend: !lookup /datalayer-app/outputs/datalayer_backend
        cidr_block:
          - !lookup /instances/outputs/utility_ip
          - "${DETC_MY_IP}"
        wait_for:
           ticketing_app_url:
              app_name: "ticketing-frontend"
              field: "load_balancer_ip"

    - name: setup-utility-curl
      extension: Ansible
      source:
        location: "git+https://github.com/lacework-demo/ticketing-app.git"
        subdir: "deploy/ansible"
      tags: application
      needs:
        - frontend-k8s
      helpers:
        - helper: ServiceAvailable # Ensure deployed ec2 instance is running and available on port 22
          args:
            hostname: !lookup /instances/outputs/utility_ip
            port: 22
        - helper: WriteValue # Write out the pem file created for ec2 instance
          run_on_dryrun: true
          args:
            raw_value: !lookupSecret /instances/outputs/pem
            dstfile: instance.pem
            mode: 0600
      args:
        inventory: !lookup /instances/outputs/utility_ip
        private_key: instance.pem
        user: "ubuntu"
        playbook: curl_it.yml
        extra_vars:
          url: !lookup /frontend-k8s/outputs/ticketing-frontend
        privilege_escalation:
          become: true

# format: "{{range $i, $e := .inventory_array }}{{ if $i }},{{end}}http://{{.}}:8889{{end}}"
